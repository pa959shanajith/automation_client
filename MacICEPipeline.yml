name: MacICEPipeline
trigger: none

pool:
  name: MAC
  demands:
   - Agent.Name -equals Monterey

resources:
  pipelines:
  - pipeline: MacICEPipeline
    source: Build-AvoAssure
    trigger: true
steps:

- task: DownloadBuildArtifacts@1
  inputs:
    buildType: 'specific'
    project: 'c5d3a8af-ebac-4015-ad8b-72c66fcf8fbd'
    pipeline: '182'
    buildVersionToDownload: 'latest'
    downloadType: 'single'
    artifactName: 'dependencies'
    downloadPath: '$(System.ArtifactsDirectory)'

- script: |
    unzip -j $(Build.ArtifactStagingDirectory)/dependencies/dependencies.zip -d $(Build.ArtifactStagingDirectory)
    rm -rf dependencies
    ls $(System.ArtifactsDirectory)
  displayName: 'unzipping dependencies folder'

- checkout: git://$(System.TeamProject)/ICE  
  persistCredentials: true
  clean: true
  path: s/avoassure

- task: CmdLine@2
  inputs:
    script: |
      BranchName=$(cat $(System.ArtifactsDirectory)/BranchName.txt)
      echo "Branch Name is:$BranchName"
      echo $(Build.SourceBranch)
      cd s/avoassure
      git checkout $BranchName
      ls

- task: PythonScript@0
  displayName: 'Python script for building (.so files )- Monterey'
  inputs:
    scriptSource: inline
    script: |
     #==============================IMPORTING PACKAGES===============================================================
     from os.path import splitext, join
     import time
     from os import walk
     import sys
     import os
     import subprocess
     print("Importing Packages")
     cwd = os.getcwd()
     print('Current directory is ::: ', cwd)
     pythondir = os.path.dirname(os.path.dirname(sys.executable))
     print("Python directory is ::: ", pythondir)
     PY_MJR = str(sys.version_info.major)
     PY_MIN = str(sys.version_info.minor)
     LIB_FILE = PY_MJR+'.'+PY_MIN
     INCLUDE_DIR = LIB_FILE + ('m' if PY_MJR == '3' else '')
     print("VALUES SET TO VARIABLES PY_MJR , PY_MIN , LIB_FILE, INCLUDE_DIR",PY_MJR, PY_MIN, LIB_FILE, INCLUDE_DIR)
     errorcount = 0
     ext_o_c_py = [".py", ".c"]
     def build(full_path, file, file_refer):
         global errorcount
         try:
             # pending save error and filename to file
             cython_process = subprocess.Popen(sys.executable + " -m cython -"+PY_MJR +" " + full_path, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
             out, err = cython_process.communicate()
             exitcode = cython_process.returncode
             if not exitcode == 0:
                 errorcount = errorcount + 1
                 print(full_path)
                 print(out)
                 print(err)
                 file_refer.write(str(full_path) + "\nError:" +str(err) + "\nOutput:" + str(out) + "\n------- \n")
                 return
             full_path = full_path[:-3]  # removing extesnion
             file = file[:-3]
             gcc_process_so = subprocess.Popen("gcc -shared -I" + pythondir + "/include/python"+INCLUDE_DIR+" -L" + pythondir + "/lib -o " +full_path + ".so " + full_path + ".c -lpython"+LIB_FILE+"m", stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
             out, err = gcc_process_so.communicate()
             exitcode = gcc_process_so.returncode
             if not exitcode == 0:
                 errorcount = errorcount + 1
                 print(out)
                 print(err)
             if os.path.isfile(full_path + ".so"):
                 print("generated the file removing unwanted")
                 for ext in ext_o_c_py:
                     if os.path.isfile(full_path + ext):
                         subprocess.check_call("rm " + full_path + ext, shell=True)
         except subprocess.CalledProcessError as e:
             errorcount = errorcount + 1
             print(e)
             return
     def select_files(ign, root, files):
         py_files = []
         file_refer = open('../cython_error.txt', 'a')
         for file in files:
             full_path = os.path.normpath(join(root, file))
             extsn = splitext(file)[1]
             if extsn == ".py" and (full_path not in ign):
                 py_files.append(full_path)
                 build(full_path, file, file_refer)
     
         file_refer.close()
         return py_files
     def build_recursive_dir_tree(path):
         print("Executing build_recursive_dir_tree")
         selected_files = []
         ign = ["Core/__main__.py", "AWS/android_operations_keywords.py", "AWS/android_spinner_keywords.py",
                "AWS/custom_aws.py", "AWS/generic_operations.py", "AWS/testmobile_constants.py"]
         ign = [path + file for file in ign]
         for i, ignv in enumerate(ign):
             ign[i] = os.path.normpath(ignv)
             print("Ignoring the file ", ign[i], " for the build process")
         print(ign)
         for root, dirs, files in walk(path):
             root = os.path.normpath(root)
             if (root not in ign):
                 selected_files += select_files(ign, root, files)
         return selected_files
     build_recursive_dir_tree(cwd + "/plugins/")
     
     if errorcount > 0:
         print("raise error")
         raise RuntimeError("BUILD FAILED : There are " +
                            str(errorcount) + " no of errors")
     
    pythonInterpreter: '$(MONTEREY_PYTHON)'

- task: PythonScript@0
  displayName: 'Run Python script for building- Monterey PYC and Binaries'
  inputs:
    scriptSource: inline
    script: |
     from os.path import splitext, join
     import time
     from os import walk
     import sys
     import os,py_compile
     import subprocess
     print("Importing Packages")
     cwd = os.getcwd()
     print('Current directory is ::: ', cwd)
     pythondir = os.path.dirname(os.path.dirname(sys.executable))
     print("Python directory is ::: ", pythondir)
     PY_MJR = str(sys.version_info.major)
     PY_MIN = str(sys.version_info.minor)
     LIB_FILE = PY_MJR+'.'+PY_MIN
     INCLUDE_DIR = LIB_FILE + ('m' if PY_MJR == '3' else '')
     def build_pyc(path):
         for i in os.listdir(path):
             if i.endswith("py"):
                 fp = path+i
                 py_compile.compile(fp, fp+"c")
                 os.remove(fp)
     
     
     def build_binaries(npath):
         global errorcount
         file_stream = open('../cython_error.txt', 'a')
         fl_list = ["/assets/Update.py", "/assets/IRISMT/IRISMT.py",
                    "/assets/ObjectPredictionMT/ObjectPredictionMT.py"]
         for f in fl_list:
             fp = npath+f
             fp_c = npath+os.path.splitext(f)[0]+".c"
             cython_process = subprocess.Popen(sys.executable + " -m cython -"+PY_MJR+" " +
                                               fp + " --embed", stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
             out, err = cython_process.communicate()
             exitcode = cython_process.returncode
             if os.path.isfile(fp_c):
                 print(fp_c, " file created")
             else:
                 time.sleep(4)
                 if os.path.isfile(fp_c):
                     print(fp_c, " file created")
             if not exitcode == 0:
                 print("cython error", err)
                 errorcount = errorcount + 1
                 file_stream.write(str(fp) + "\nError:" + str(err) +
                                   "\nOutput:" + str(out) + "\n------- \n")
                 return
             gcc_cmd = "gcc "+fp_c + " -o "+npath+os.path.splitext(
                 f)[0]+" -I"+pythondir+"/include/python"+INCLUDE_DIR+" -L" + pythondir + "/lib " + " -lpython3.7m"
             gcc_process_so = subprocess.Popen(
                 gcc_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
             out, err = gcc_process_so.communicate()
             exitcode = gcc_process_so.returncode
             time.sleep(4)
             if not exitcode == 0:
                 print("gcc error", err)
                 errorcount = errorcount + 1
                 return
         for f in fl_list:
             fp = npath+f
             fp_c = npath+os.path.splitext(f)[0]+".c"
             if os.path.isfile(fp):
                 os.remove(fp)
             if os.path.isfile(fp_c):
                 os.remove(fp_c)
     
     build_pyc(cwd+"/plugins/AWS/")
     build_binaries(cwd)
    pythonInterpreter: '$(MONTEREY_PYTHON)'

- script: |
   mkdir AvoAssure 
   cd assets 
   cd ..
   mv ./plugins ./AvoAssure/
   mv  ./assets ./AvoAssure/
  displayName: 'Command Line Script'

- task: ArchiveFiles@2
  displayName: 'Archive AvoAssure'
  inputs:
    rootFolderOrFile: AvoAssure
    archiveFile: '$(Build.ArtifactStagingDirectory)/AvoAssure.7z'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: Monterey'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/AvoAssure.7z'
    ArtifactName: Monterey